import base64
import time
import os
import json
import random
from io import BytesIO

import numpy as np
import requests

from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_404_NOT_FOUND, HTTP_201_CREATED, \
    HTTP_500_INTERNAL_SERVER_ERROR
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from moviepy import ImageClip, AudioFileClip, TextClip, CompositeVideoClip, concatenate_videoclips, CompositeAudioClip, \
    concatenate_audioclips, VideoClip
from openai import OpenAI
from .youtube_upload import youtube_authenticate, upload_video


from django.core.files.base import ContentFile
from .models import Video
import moviepy.config as mpy_config

from .selenium_upload import upload_video_to_tiktok

mpy_config.FFMPEG_BINARY = "/usr/bin/ffmpeg"





# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# OpenAI API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# Eleven Labs API
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")

# Google Cloud Credentials
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

# Suno API
SUNO_COOKIE = os.getenv("SUNO_COOKIE")
SUNO_API_KEY = os.getenv("SUNO_API_KEY")
SUNO_API_URL = os.getenv("SUNO_API_URL")
CHECK_STATUS_URL = os.getenv("CHECK_STATUS_URL")

class GenerateTextAPIView(APIView):
    def post(self, request):
        theme = request.data.get('theme', '–Ω–∞—É–∫–∞')

        prompt = f"""
                –ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –º–µ–Ω–µ–µ 5000 –∑–Ω–∞–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã) –ø–æ —Ç–µ–º–µ {theme}. 
                –†–∞–∑–±–µ–π –µ–≥–æ –Ω–∞ 5 —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞—Å—Ç–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 600 –∑–Ω–∞–∫–æ–≤ –∏ –±—ã–ª–∞ –ø–æ–Ω—è—Ç–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ. 
                –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º.

                –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –Ω–∞–ø–∏—à–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ DALL¬∑E.

                –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º—É–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —ç—Ç–æ–º—É —Ñ–∞–∫—Ç—É.


                ‚ö°Ô∏è –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤):
                {{
                    "text": "–ü–æ–ª–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç (5500 –∑–Ω–∞–∫–æ–≤, 5 —á–∞—Å—Ç–∏)",
                    "frames": [
                        {{"text": "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1000 –∑–Ω–∞–∫–æ–≤)", "image_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏"}} ,
                        {{"text": "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1000 –∑–Ω–∞–∫–æ–≤)", "image_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏"}} ,
                        {{"text": "–¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1000 –∑–Ω–∞–∫–æ–≤)", "image_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏"}}
                        {{"text": "–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1000 –∑–Ω–∞–∫–æ–≤)", "image_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏"}}
                        {{"text": "–ü—è—Ç–∞—è —á–∞—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1000 –∑–Ω–∞–∫–æ–≤)", "image_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—è—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏"}}
                    ],
                    "music_prompt": "–û–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
                    "tiktok_description": "–¢–µ–∫—Å—Ç –¥–ª—è TikTok —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏",
                }}
                –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.
                """

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": prompt}],
        )
        print(response.choices[0].message.content)
        gpt_data = json.loads(response.choices[0].message.content)

        video = Video.objects.create(
            theme=theme,
            text=gpt_data["text"],
            frame_1_text=gpt_data["frames"][0]["text"],
            frame_2_text=gpt_data["frames"][1]["text"],
            frame_3_text=gpt_data["frames"][2]["text"],
            frame_4_text=gpt_data["frames"][3]["text"],
            frame_5_text=gpt_data["frames"][4]["text"],
            frame_1_prompt=gpt_data["frames"][0]["image_prompt"],
            frame_2_prompt=gpt_data["frames"][1]["image_prompt"],
            frame_3_prompt=gpt_data["frames"][2]["image_prompt"],
            frame_4_prompt=gpt_data["frames"][3]["image_prompt"],
            frame_5_prompt=gpt_data["frames"][4]["image_prompt"],
            music_prompt=gpt_data["music_prompt"],
            tiktok_description=gpt_data["tiktok_description"]
        )

        return Response({
            "text": gpt_data["text"],
            "id": video.id,
            "frames": gpt_data["frames"],
            "music_prompt": gpt_data["music_prompt"],
            "tiktok_description": gpt_data["tiktok_description"]
        }, status=status.HTTP_201_CREATED)


class GenerateMusicAPIView(APIView):
    def post(self, request):
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏")
        video_id = request.data.get("video_id")

        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            print("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=HTTP_404_NOT_FOUND)

        if not video.music_prompt:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–º—Ç–∞ –¥–ª—è –º—É–∑—ã–∫–∏")
            return Response({"error": "–ù–µ—Ç –ø—Ä–æ–º—Ç–∞ –¥–ª—è –º—É–∑—ã–∫–∏"}, status=HTTP_400_BAD_REQUEST)

        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }

        payload = {
            "prompt": video.music_prompt,
            "style": "Orchestral",
            "title": f"Generated Music for Video {video.id}",
            "customMode": True,
            "instrumental": True,
            "model": "V4",
            "callBackUrl": "https://your-backend.com/api/music_callback/"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        response = requests.post(SUNO_API_URL, json=payload, headers=headers)

        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        result = response.json()
        print(f"üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {result}")

        if response.status_code != 200 or result.get("code") != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            return Response({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        task_id = result["data"]["taskId"]
        print(f"‚úÖ –ú—É–∑—ã–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, taskId: {task_id}")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç = 30 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫)
        music_url = None
        for _ in range(30):
            time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

            check_response = requests.get(CHECK_STATUS_URL, headers=headers, params={"taskId": task_id})
            try:
                status_result = check_response.json()
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", e)
                print("–û—Ç–≤–µ—Ç:", check_response.text)
                return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {check_response.status_code}")
            print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç API: {status_result}")

            if check_response.status_code == 200 and status_result.get("msg") == "success":
                task_info = status_result.get("data", {})
                status = task_info.get("status")
                print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}")

                if status == "SUCCESS":
                    suno_data = task_info.get("response", {}).get("sunoData", [])

                    if suno_data:
                        first_track = suno_data[0]
                        music_url = first_track.get("audioUrl")
                        if music_url:
                            print(f"üéµ –ú—É–∑—ã–∫–∞ –≥–æ—Ç–æ–≤–∞! –°–∫–∞—á–∏–≤–∞–π –æ—Ç—Å—é–¥–∞: {music_url}")
                            break
                        else:
                            print("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ URL –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    else:
                        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—É–∑—ã–∫–µ.")
            else:
                print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...")

        if not music_url:
            print("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ 5 –º–∏–Ω—É—Ç")
            return Response({"error": "–ú—É–∑—ã–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ 5 –º–∏–Ω—É—Ç"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # –°–∫–∞—á–∏–≤–∞–µ–º –º—É–∑—ã–∫—É
        music_path = f"music_{video.id}.mp3"
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É...")
        music_response = requests.get(music_url)

        if music_response.status_code == 200:
            with open(music_path, "wb") as f:
                f.write(music_response.content)
            print("‚úÖ –ú—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏")
            return Response({"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–∑—ã–∫—É –≤ Django
        with open(music_path, "rb") as music_file:
            video.music_file.save(f"music_{video.id}.mp3", ContentFile(music_file.read()))
        print("‚úÖ –ú—É–∑—ã–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ Video")

        os.remove(music_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        print("üóë –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        return Response({
            "message": "–ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
            "music_url": video.music_file.url
        }, status=HTTP_201_CREATED)



class GenerateAudioAPIView(APIView):
    def post(self, request, *args, **kwargs):
        video_id = request.data.get("video_id")
        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        # input_text = video.ssml_text if video.ssml_text else video.text
        input_text = video.text

        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å (tts-1 –∏–ª–∏ tts-1-hd)
        model = "tts-1-hd"  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "tts-1-hd" –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–∑–≤—É—á–∫–∏

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI TTS
        response = client.audio.speech.create(
            model=model,
            voice="shimmer",  # –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π "fable" –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "echo", "fable", "onyx", "nova", "shimmer"
            input=input_text,
            speed=1.5
        )

        # –ß–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ
        audio_bytes = response.read()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ Django
        audio_file = ContentFile(audio_bytes, name=f"audio_{video.id}.mp3")
        video.audio_file.save(audio_file.name, audio_file)

        # –ü–æ–ª–Ω—ã–π URL —Ñ–∞–π–ª–∞
        audio_full_url = request.build_absolute_uri(video.audio_file.url)
        print(audio_full_url)

        return Response({"message": "–û–∑–≤—É—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", "audio_url": audio_full_url}, status=201)


class GenerateImagesAPIView(APIView):
    def post(self, request):
        video_id = request.data.get("video_id")
        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        image_prompts = [
            video.frame_1_prompt,
            video.frame_2_prompt,
            video.frame_3_prompt,
            video.frame_4_prompt,
            video.frame_5_prompt
        ]

        image_urls = []
        for i, prompt in enumerate(image_prompts):
            response = client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                n=1,
                size="1024x1024",
                response_format="b64_json"
            )

            image_data = base64.b64decode(response.data[0].b64_json)
            image_file = ContentFile(image_data, name=f"background_{video.id}_{i + 1}.png")

            field_name = f"background_image_{i + 1}"
            getattr(video, field_name).save(image_file.name, image_file)
            image_urls.append(getattr(video, field_name).url)

        video.save()

        return Response({"message": "–§–æ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!", "image_urls": image_urls}, status=201)



class GenerateFinalVideoAPIView(APIView):
    def post(self, request):
        video_id = request.data.get("video_id")

        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        background_images = [
            video.background_image_1,
            video.background_image_2,
            video.background_image_3,
            video.background_image_4,
            video.background_image_5
        ]

        if len(background_images) < 5 or not video.audio_file:
            return Response({"error": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—É–¥–∏–æ"}, status=400)

        voice_audio = AudioFileClip(video.audio_file.path)
        audio_duration = voice_audio.duration

        image_duration = audio_duration / len(background_images)
        image_clips = [
            ImageClip(img.path).with_duration(image_duration) for img in background_images
        ]

        intro_clip = ImageClip(background_images[0].path).with_duration(1)
        all_clips = [intro_clip] + image_clips

        background_clip = concatenate_videoclips(all_clips, method="compose").with_audio(voice_audio)

        # Whisper API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        with open(video.audio_file.path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="verbose_json",
                timestamp_granularities=["word"]
            )

        words_with_timings = transcript.words
        subtitles_offset = 1  # –î–≤–∏–≥–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥
        txt_clips = []

        for word in words_with_timings:
            start_time = max(0, word.start + subtitles_offset)  # –ò–∑–±–µ–≥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            word_duration = max(0.2, word.end - word.start)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            position = ('center', 'center')  # –†–∞–∑–º–µ—â–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞

            txt_clips.append(generate_subtitle_text(
                word.word, start_time, word_duration, position,
                font_path="/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø
        final_clip = CompositeVideoClip([background_clip] + txt_clips)

        output_filename = f"final_{video.id}.mp4"
        output_path = os.path.join("media/videos/", output_filename)
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        final_clip.write_videofile(
            output_path,
            fps=60,
            codec='libx264',
            audio_codec="aac",
            ffmpeg_params=['-preset', 'slow', '-crf', '18', '-b:v', '10M', '-pix_fmt', 'yuv720p'],
            threads=6
        )

        video.final_video = output_path
        video.save()

        return Response(
            {
                "message": "–í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                "video_url": video.final_video.url
            },
            status=201
        )


def gradual_fade_mask(width, height, duration):
    def make_frame(t):
        alpha = np.clip(t / duration, 0, 1)  # –ó–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 1
        mask = np.ones((height, width, 1), dtype=np.float32) * alpha  # 3D –º–∞—Å–∫–∞ —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º
        return mask

    return VideoClip(make_frame, duration=duration).to_mask()


def generate_subtitle_text(word, start_time, duration, position, font_path, font_size=50):
    """
    –°–æ–∑–¥–∞—ë—Ç –æ–±—ã—á–Ω—ã–π –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–∞.
    """

    txt_white = TextClip(
        text=word,
        font=font_path,
        font_size=font_size,
        color="white",
        stroke_color="black",
        stroke_width=3
    ).with_start(start_time).with_duration(duration).with_position(position)

    return txt_white


def group_words(words_with_timings, group_size=3):
    grouped = []
    for i in range(0, len(words_with_timings), group_size):
        chunk = words_with_timings[i:i+group_size]
        text = " ".join([w.word for w in chunk])
        start = chunk[0].start
        end = chunk[-1].end
        grouped.append({"text": text, "start": start, "end": end})
    return grouped


class PublishToYoutubeAPIView(APIView):
    def post(self, request):
        video_id = request.data.get("video_id")

        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        youtube = youtube_authenticate()

        video_path = video.final_video.path.replace('/media/media/', '/media/')
        # video_path = video.final_video.path
        title = f"–ù–∞—É—á–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {video.theme}"
        description = video.tiktok_description
        # tags = [video.theme, "–Ω–∞—É–∫–∞", "shorts"]

        response = upload_video(youtube, video_path, title, description)

        return Response({
            "message": "–í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–º!",
            "video_url": video.final_video.url.replace('/media/', '')
        }, status=201)


class PublishToTikTokAPIView(APIView):
    def post(self, request):
        video_id = request.data.get("video_id")

        if not video_id:
            return Response({"error": "video_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}, status=400)

        try:
            video = Video.objects.get(id=video_id)
        except Video.DoesNotExist:
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        video_path = video.final_video.path.replace('/media/media/', '/media/')  # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
        title = f"–ù–∞—É—á–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {video.theme}"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        description = video.tiktok_description  # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        tags = [video.theme, "–Ω–∞—É–∫–∞", "shorts"]  # –¢–µ–≥–∏ –¥–ª—è –≤–∏–¥–µ–æ

        try:
            print(f"–ó–∞–ø—É—Å–∫ upload_video_to_tiktok —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\nvideo_path={video_path}\ntitle={title}\ndescription={description}")
            result = upload_video_to_tiktok(video_path, title, description)
            return Response({"message": result}, status=200)
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ upload_video_to_tiktok:\n{error_details}")
            return Response({"error": str(e), "trace": error_details}, status=500)





class GetFinalVideoAPIView(APIView):
    def get(self, request, video_id):
        video = get_object_or_404(Video, id=video_id)

        if video.final_video:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ "media/media/" –∏–∑ –ø—É—Ç–∏
            video_url = request.build_absolute_uri(video.final_video.url.replace('/media/media/', '/media/'))
            return JsonResponse({"final_video_url": video_url}, status=200)
        else:
            return JsonResponse({"error": "–§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}, status=404)


class MusicCallbackAPIView(APIView):
    def post(self, request):
        print("üì• –ü–æ–ª—É—á–µ–Ω callback –æ—Ç Suno API")
        data = request.data
        print(f"üì° –î–∞–Ω–Ω—ã–µ callback: {data}")

        music_url = data.get("music_url")
        video_id = data.get("video_id")

        if not music_url or not video_id:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback-–æ—Ç–≤–µ—Ç")
            return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback"}, status=400)

        try:
            video = Video.objects.get(id=video_id)
            video.music_file.save(f"music_{video.id}.mp3", ContentFile(requests.get(music_url).content))
            video.save()
            print("‚úÖ –ú—É–∑—ã–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ Video")
        except Video.DoesNotExist:
            print("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return Response({"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        return Response({"message": "–ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}, status=200)




