import os

from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext
import requests

load_dotenv()

API_URL = os.getenv("API_URL")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def generate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    theme = " ".join(context.args) if context.args else "–Ω–∞—É–∫–∞"
    response = requests.post(f"{API_URL}/generate-text/", json={"theme": theme})
    if response.status_code == 201:
        data = response.json()
        await update.message.reply_text(f"–¢–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω! ID: {data['id']} \n\n{data['text']}")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.text}")


async def generate_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /generate_audio 123")
        return

    video_id = context.args[0]
    response = requests.post(f"{API_URL}/generate-audio/", json={"video_id": video_id})

    if response.status_code == 201:
        data = response.json()
        audio_url = data.get("audio_url")
        print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ: {audio_url}")

        if audio_url.startswith("http"):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –ø–æ–ª–Ω—ã–π
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio_file = requests.get(audio_url).content
            with open("temp_audio.mp3", "wb") as file:
                file.write(audio_file)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Telegram
            await update.message.reply_audio(audio=open("temp_audio.mp3", "rb"), caption="üéô –ì–æ—Ç–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞!")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove("temp_audio.mp3")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.text}")

async def generate_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video_id = context.args[0]
    response = requests.post(f"{API_URL}/generate-image/", json={"video_id": video_id})
    if response.status_code == 201:
        await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.text}")

async def generate_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video_id = context.args[0]
    response = requests.post(f"{API_URL}/generate-video/", json={"video_id": video_id})
    if response.status_code == 201:
        video_url = response.json()["video_url"]
        await update.message.reply_text(f"–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.text}")

async def generate_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –≤–∏–¥–µ–æ –¥–ª—è –º—É–∑—ã–∫–∏!")
        return

    video_id = context.args[0]

    response = requests.post(f"{API_URL}/generate_music/", json={"video_id": video_id})

    if response.status_code == 201:
        music_url = response.json().get("music_url", "URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.message.reply_text(f"–ú—É–∑—ã–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! üéµ\n{music_url}")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {response.text}")

async def publish_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video_id = context.args[0]
    print(API_URL)
    response = requests.get(f"{API_URL}/videos/{video_id}/")

    if response.status_code == 200:
        video_url = response.json()["final_video_url"]

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
        video_file = requests.get(video_url).content
        with open("temp_video.mp4", "wb") as file:
            file.write(video_file)

        await update.message.reply_video(video=open("temp_video.mp4", "rb"))
        os.remove("temp_video.mp4")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {response.text}")



async def publish_youtube(update, context):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        return

    video_id = context.args[0]

    response = requests.post(
        "http://127.0.0.1:8000/api/publish-youtube/",
        json={"video_id": video_id}
    )

    if response.status_code == 201:
        await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ YouTube!")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.text}")

async def publish_tiktok(update, context):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        return

    video_id = context.args[0]

    response = requests.post(
        "http://127.0.0.1:8000/api/publish-tiktok/",
        json={"video_id": video_id}
    )

    if response.status_code == 200:
        await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ TikTok!")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.text}")

async def help_command(update: Update, context):
    help_text = """
    üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

    üîπ /generate_text - –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç
    üîπ /generate_audio - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É
    üîπ /generate_image - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    üîπ /generate_music - –°–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É
    üîπ /generate_video - –°–æ–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ
    üîπ /publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ
    üîπ /publish_youtube - –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ YouTube
    üîπ /publish_tiktok - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ TikTok
    """
    await update.message.reply_text(help_text)
application = ApplicationBuilder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("generate_text", generate_text))
application.add_handler(CommandHandler("generate_audio", generate_audio))
application.add_handler(CommandHandler("generate_image", generate_images))
application.add_handler(CommandHandler("generate_video", generate_video))
application.add_handler(CommandHandler("generate_music", generate_music))
application.add_handler(CommandHandler("publish", publish_video))
application.add_handler(CommandHandler("publish_youtube", publish_youtube))
application.add_handler(CommandHandler("publish_tiktok", publish_tiktok))

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ Telegram
async def set_bot_commands():
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("generate_text", "–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç"),
        BotCommand("generate_audio", "–°–æ–∑–¥–∞—Ç—å –æ–∑–≤—É—á–∫—É"),
        BotCommand("generate_image", "–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
        BotCommand("generate_video", "–°–æ–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand("generate_music", "–°–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É"),
        BotCommand("publish", "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand("publish_youtube", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ YouTube"),
        BotCommand("publish_tiktok", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ TikTok"),
    ]
    bot = application.bot
    await bot.set_my_commands(commands)

if __name__ == "__main__":
    application.run_polling()
    application.loop.run_until_complete(set_bot_commands())

